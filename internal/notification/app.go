package notification

import (
	"easycodeapp/internal/config"
	"easycodeapp/internal/googlesheet"
	"easycodeapp/internal/infrastructure/logger"
	m "easycodeapp/internal/model"
	"easycodeapp/internal/tg"
	"easycodeapp/pkg/model"
	"errors"
	"fmt"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gorm.io/gorm"
)

var NotificationApp *NotificationManager = &NotificationManager{}

func InitNotificationApp() error {
	var err error
	NotificationApp, err = NewNotificationManager()
	if err != nil {
		return err
	}

	return nil
}

// NotificationManager –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Ç–≥, —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∫–Ω–æ–ø–∫–∏
type NotificationManager struct {
	User     *Database
	Message  *Database
	CallBack *Database
}

// NewNotificationManager —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä NotificationManager, –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
func NewNotificationManager() (*NotificationManager, error) {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
	user, err := NewDatabase()
	if err != nil {
		return nil, err
	}

	message, err := NewDatabase()
	if err != nil {
		return nil, err
	}

	—ÅallBack, err := NewDatabase()
	if err != nil {
		return nil, err
	}

	// –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
	err = —ÅallBack.CreateTable(&CallBack{})
	if err != nil {
		logger.Info("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É CallBack!")
		return nil, err
	}

	err = user.CreateTable(&model.User{})
	if err != nil {
		return nil, err
	}

	err = message.CreateTable(&m.Message{})
	if err != nil {
		return nil, err
	}

	err = message.CreateTable(&OldMessage{})
	if err != nil {
		return nil, err
	}

	notificationManager := &NotificationManager{
		User:     user,
		Message:  message,
		CallBack: —ÅallBack,
	}

	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º
	tg.TelegramBot.HandlCallbackLessonButton = notificationManager.HandlCallbackRoute

	if !config.File.WebConfig.IsTestMode {
		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
		notificationManager.updateTeachersDB()

		// –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		notificationManager.Message.HandleMessageTable("crm_id", 200, notificationManager.deleteOldMessage)

		//  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤/—Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
		notificationManager.UpdateLessonDB(true)

		//  –ü–µ—Ä–µ–æ–¥–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
		go notificationManager.StartPeriodicLessonDBUpdate()

		// // –ü–µ—Ä–µ–æ–¥–∏—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		go notificationManager.startPeriodicDeletionOldMessages(1 * time.Hour)

		// //  –ü–µ—Ä–µ–æ–¥–∏—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		go notificationManager.HandleMorningMessage()

		// //  –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î, –ø—Ä–æ–≤–µ—Ä–∫–∞ callback
		go notificationManager.StartDailyUpdate()

		// // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
		go notificationManager.StartDailyUserTableRefresh()
	} else {
		logger.Info("–í–ö–õ–Æ–ß–ï–ù –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–£–°–ö. –ü–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ")
	}

	return notificationManager, nil
}

// checkArrayLengths –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏–Ω –º–∞—Å—Å–∏–≤–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫
func checkArrayLengths(rangeInt int, crms, names, usernames, chat_ids []string) error {
	lengths := map[string]int{
		"rangeInt":  rangeInt,
		"crms":      len(crms),
		"names":     len(names),
		"usernames": len(usernames),
		"chat_ids":  len(chat_ids),
	}

	mismatch := false
	var errorDetails strings.Builder
	errorDetails.WriteString("–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª–∏–Ω –º–∞—Å—Å–∏–≤–æ–≤:\n")

	for name, length := range lengths {
		errorDetails.WriteString(fmt.Sprintf("- %s: %d\n", name, length))
		if length != rangeInt {
			mismatch = true
		}
	}

	if mismatch {
		return fmt.Errorf(errorDetails.String())
	}

	return nil
}

// GetUserData –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (app *NotificationManager) GetUsersData() ([]model.User, error) {
	conf := config.File.GoogleSheetConfig
	rangeStr, err := googlesheet.GoogleSheet.GetCellValue(conf.SelectDataTableID, conf.UsersListName, "C1")
	if err != nil {
		return nil, err
	}
	rangeInt, err := strconv.Atoi(rangeStr)
	if err != nil {
		return nil, err
	}

	matrix, err := googlesheet.GoogleSheet.GetMatrix(conf.SelectDataTableID, conf.UsersListName, 1, 4, 3, rangeInt)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: %w", err)
	}
	if len(matrix) != 4 {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: len(matrix) != 4. Len = %d", len(matrix))
	}
	for i := 0; i < len(matrix); i++ {
		if len(matrix[i]) != rangeInt-2 {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π. –ú–∞—Å–∏–∏–≤ %d –Ω–µ —Ä–∞–≤–µ–Ω –¥–ª–∏–Ω–µ %d. –î–ª–∏–Ω–∞ = %d", i, rangeInt-2, len(matrix[i]))
		}
	}

	crms := matrix[0]
	names := matrix[1]
	usernames := matrix[2]
	chatIds := matrix[3]

	// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ
	rangeInt -= 2 // –¢.–∫. –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –∏–¥—É—Ç A2:A, —Ç–æ –∏—Ö —Ä–∞–∑–º–µ—Ä –º–µ–Ω—å—à–µ –Ω–∞ 1
	if err := checkArrayLengths(rangeInt, crms, names, usernames, chatIds); err != nil {
		logger.Error(err)
		return nil, err
	}

	users := []model.User{}

	errorsToTg := ""

	for i := 0; i < rangeInt; i++ {
		isValid := true

		crmId, err := strconv.ParseInt(crms[i], 10, 64)
		if err != nil {
			logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å crmId –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", names[i], "\n–û—à–∏–±–∫–∞: ", err.Error())
			isValid = false
		}
		if strings.TrimSpace(names[i]) == "" {
			logger.Error("–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ. CRM ID: ", crms[i])
			isValid = false
		}
		if strings.TrimSpace(usernames[i]) == "" {
			logger.Error("Username –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ. CRM ID: ", crms[i])
			isValid = false
		}
		chatId, err := strconv.ParseInt(chatIds[i], 10, 64)
		if err != nil {
			logger.Error("chatId –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ. CRM ID: ", crms[i])
			isValid = false
		}

		user := model.User{
			CRMID:       crmId,
			TeacherName: strings.TrimSpace(names[i]),
			UserName:    strings.TrimSpace(usernames[i]),
			ChatID:      chatId,
			// UserName: "@Tichomirov2003",
			// ChatID: 2024983086,
		}

		// –í —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
		if isValid {
			users = append(users, user)
		} else {
			errorsToTg += names[i] + ", "
		}
	}

	if errorsToTg != "" {
		message := "<strong>üö®–û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π</strong>\n" + errorsToTg
		tg.TelegramBot.SendAllAdmins(message)
	}

	if len(users) == 0 {
		tg.TelegramBot.SendAllAdmins("–Ω–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü")
		return nil, fmt.Errorf("–Ω–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü")
	}
	return users, nil
}

// updateTeachersDB –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Ç–∞–±–ª–∏—Ü–∞–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ë–î
func (app *NotificationManager) updateTeachersDB() error {
	users, err := app.GetUsersData()
	if err != nil {
		logger.Info("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: ", err)
		return err
	}

	logger.Info("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: ", users)

	for i := 0; i < len(users); i++ {
		err = app.UpsertUser(&users[i])
		if err != nil {
			logger.Error("updateTeachersDB: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –ë–î: ", err)
			continue // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
		}
	}
	return nil
}

// UpsertUser –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ
func (app *NotificationManager) UpsertUser(user *model.User) error {
	if user == nil {
		return errors.New("user is nil")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
	var existingUser model.User
	result := app.User.DB.Where("user_name = ?", user.UserName).First(&existingUser)

	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
			if err := app.User.DB.Create(user).Error; err != nil {
				return errors.New("failed to create new user: " + err.Error())
			}
			return nil
		}
		return errors.New("database error: " + result.Error.Error())
	}

	// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –∫—Ä–æ–º–µ username
	updates := map[string]interface{}{
		"crm_id":       user.CRMID,
		"teacher_name": user.TeacherName,
		"chat_id":      user.ChatID,
	}

	if err := app.User.DB.Model(&existingUser).Updates(updates).Error; err != nil {
		return errors.New("failed to update user: " + err.Error())
	}

	return nil
}

func addNegative100Prefix(num int64) int64 {
	str := fmt.Sprintf("-100%d", num)
	result, _ := strconv.ParseInt(str, 10, 64)
	return result
}

// startNadleOldMessages —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –°—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –≤ –¥—Ä–≥—É—é –ë–î. –û—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ, —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î.
func (app *NotificationManager) startPeriodicDeletionOldMessages(pause time.Duration) {
	for {
		app.Message.HandleMessageTable("crm_id", 200, app.deleteOldMessage)
		time.Sleep(pause)
	}
}

// handleOldMessage —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫, –ø–µ—Ä–µ–Ω–æ—Å –≤ —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É.
func (app *NotificationManager) deleteOldMessage(results []m.Message) {
	for _, message := range results {
		if !isSameYearMonthDay(time.Now(), message.LessonTime) {

			err := app.Message.DeleteRecordByColumn("id", message.ID, m.Message{})
			if err != nil {
				logger.Info("–ù–µ  —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ", err)
				continue
			}
			err = app.Message.DeleteRecordByColumn("id", message.ID, m.CachedMessage{})
			if err != nil {
				logger.Info("–ù–µ  —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ", err)
				continue
			}
		}
	}
}

// SendLessonsNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–∫–∞—Ö –∑–∞ –¥–µ–Ω—å –≤ —á–∞—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
func (app *NotificationManager) SendLessonsNotification(messages []m.Message) {
	if len(messages) == 0 || messages == nil {
		return
	}

	text := fmt.Sprintf("<strong>üôÇ–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: %s</strong>\n\n", messages[0].TeacherName)
	for _, msg := range messages {
		text += fmt.Sprintf(`
		<strong>üìã–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</strong>: %s
		<strong>‚è∞–í—Ä–µ–º—è —É—Ä–æ–∫–∞:</strong> %s

		`,
			msg.CourseName, msg.LessonTime.Format("2006-01-02 15:04"))
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "-100"
	msg := tgbotapi.NewMessage(addNegative100Prefix(messages[0].ChatID), text)
	msg.ParseMode = "html"
	_, err := tg.TelegramBot.SendMessageRepetLowPriority(msg, 3)
	if err != nil {

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
		msg = tgbotapi.NewMessage(messages[0].ChatID, text)
		msg.ParseMode = "html"
		_, err = tg.TelegramBot.SendMessageRepetLowPriority(msg, 3)
		if err != nil {

			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "-"
			msg = tgbotapi.NewMessage(messages[0].ChatID*-1, text)
			msg.ParseMode = "html"
			_, err = tg.TelegramBot.SendMessageRepetLowPriority(msg, 3)
			if err != nil {
				logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ", err, "\n; –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ", messages[0].TeacherName, messages[0].UserName)
				return
			}
		}
	}
}

// StartDailyUpdate –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –Ω–∞—á–Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å, –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ message table –ë–î
func (app *NotificationManager) StartDailyUpdate() {
	// –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î —É—Å–ø–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å—Å—è/–æ–±–Ω–æ–≤–∏—Ç—å—Å—è
	time.Sleep(3 * time.Second)
	for {
		logger.Info("–ù–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î")
		app.Message.HandleMessageTable("crm_id", 200, app.handleCheckMessages)
		time.Sleep(time.Duration(config.File.NotificationConfig.AfterCheckpause) * time.Second)

		app.Message.HandleMessageTable("crm_id", 200, app.handleSendMessages)
		time.Sleep(time.Duration(config.File.NotificationConfig.AfterSendPause) * time.Second)
	}
}

func (app *NotificationManager) RefreshUserTable() error {

	// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
	err := app.User.DropTable(&model.User{})
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %w", err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
	err = app.User.CreateTable(&model.User{})
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %w", err)
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	app.updateTeachersDB()

	return nil
}

func (app *NotificationManager) StartDailyUserTableRefresh() {
	for {
		now := time.Now()
		nextRun := time.Date(now.Year(), now.Month(), now.Day(), 23, 20, 0, 0, now.Location())
		if now.After(nextRun) {
			nextRun = nextRun.Add(24 * time.Hour)
		}
		duration := nextRun.Sub(now)

		logger.Info("–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ", nextRun.Format("2006-01-02 15:04:05"))
		time.Sleep(duration)

		logger.Info("–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
		err := app.RefreshUserTable()
		if err != nil {
			logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ", err)
		} else {
			logger.Info("–¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
		}
	}
}

// StartHandleMorningUser —É—Ç—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Ä–æ–∫–∞—Ö –∑–∞ –¥–µ–Ω—å
func (app *NotificationManager) HandleMorningMessage() {
	for {
		now := time.Now()
		nextRun := time.Date(now.Year(), now.Month(), now.Day(), 7, 0, 0, 0, now.Location())

		// –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ 6 —É—Ç—Ä–∞, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
		if now.After(nextRun) {
			nextRun = nextRun.Add(24 * time.Hour)
		}

		// –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
		duration := nextRun.Sub(now)
		logger.Info("HandleMorningMessage: –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ", duration, " –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ ", nextRun)
		time.Sleep(duration)

		// –ü–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
		app.StartHandleMorningMessage()
	}
}

// StartHandleMorningMessage (—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Ä–æ–∫–∞—Ö –∑–∞ –≤–µ—Å—å –¥–µ–Ω—å) –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É—Ä–æ–∫–∏ –ø–æ CRM id –∏–∑ –±–¥, –æ—Ç–ø—Ä–∞–≤–∫–∞
func (app *NotificationManager) StartHandleMorningMessage() {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö crm_id
	var crmIds []int
	err := app.User.GetColumnValues("crm_id", &crmIds)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö crm_id: ", err)
		return
	}

	logger.Debug("–ü–æ–ª—É—á–µ–Ω—ã –≤—Å–µ crmd_ids: ", crmIds)

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É crm_id
	for _, v := range crmIds {
		var messages []m.Message
		err := app.Message.GetRecordsByColumn("crm_id", v, &messages)
		if err != nil {
			logger.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Ñ–∏–ª—å—Ç—Ä—É: ", err)
		}

		if len(messages) == 0 || messages == nil {
			continue
		}

		app.SendLessonsNotification(messages)
	}
}

// StartPeriodicLessonDBUpdate –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –≤ –ë–î
func (app *NotificationManager) StartPeriodicLessonDBUpdate() {
	for {
		now := time.Now()

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ—á–Ω—ã–º (–≤ –ø–æ–ª–Ω–æ—á—å)
		isNightRun := now.Hour() == 0

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–¥–Ω–∏–º –∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
		if now.Hour()%3 == 0 {
			logger.Info("–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤ –≤ –ë–î")
			app.UpdateLessonDB(isNightRun)
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
		nextRun := now.Add(time.Duration(3-now.Hour()%3) * time.Hour)
		nextRun = time.Date(nextRun.Year(), nextRun.Month(), nextRun.Day(), nextRun.Hour(), 0, 0, 0, nextRun.Location())
		duration := nextRun.Sub(now)

		logger.Info("–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –≤ –ë–î –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ ", nextRun.Format("2006-01-02 15:04:05"))
		time.Sleep(duration)
	}
}
