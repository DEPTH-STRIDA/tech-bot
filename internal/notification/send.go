package notification

import (
	"easycodeapp/internal/infrastructure/logger"
	"easycodeapp/internal/model"
	"easycodeapp/internal/tg"
	"errors"
	"fmt"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (app *NotificationManager) handleSendMessages(results []model.Message) {
	for _, msg := range results {
		app.sendMessage(msg)
	}
}

func (app *NotificationManager) sendMessage(message model.Message) {
	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ —É—Ä–æ–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
	if !isSameYearMonthDay(time.Now(), message.LessonTime) {
		return
	}

	// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
	if message.MsgIssent {
		return
	}

	// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
	if hasDatePassed(message.LessonTime) {
		// logger.Info(message.LessonTime.Local(), ">", time.Now().Local(), " : ", hasDatePassed(message.MsgSendTime))
		// logger.Info(message.LessonTime, ">", time.Now().Local(), " : ", hasDatePassed(message.MsgSendTime))
		return
	}

	// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
	if !hasDatePassed(message.MsgSendTime) {

		// logger.Info(message.MsgSendTime.Local(), ">", time.Now().Local(), " : ", hasDatePassed(message.MsgSendTime))
		// logger.Info(message.MsgSendTime, ">", time.Now().Local(), " : ", hasDatePassed(message.MsgSendTime))
		return
	}

	// –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ, –∏ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–æ
	data := fmt.Sprintf(`{"ActionType":"Notification","NotificationUID":"%s"}`, message.UID)
	logger.Info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É—Ä–æ–∫–∞ UID:", data, "–Ω–∞ ChatID:", message.ChatID)

	toTGString := prepareLessonNotification(message)
	chatID := int64(0)
	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "-100"
	sendedMsg, err := tg.TelegramBot.SendMessageButtonLowPriorityRepet(addNegative100Prefix(message.ChatID), toTGString, "‚úîÔ∏è –í—Å–µ —Ö–æ—Ä–æ—à–æ. –Ø –±—É–¥—É –Ω–∞ —É—Ä–æ–∫–µ.", data, 3)
	chatID = addNegative100Prefix(message.ChatID)
	if err != nil {

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
		sendedMsg, err = tg.TelegramBot.SendMessageButtonLowPriorityRepet(message.ChatID, toTGString, "‚úîÔ∏è –í—Å–µ —Ö–æ—Ä–æ—à–æ. –Ø –±—É–¥—É –Ω–∞ —É—Ä–æ–∫–µ.", data, 3)
		chatID = message.ChatID
		if err != nil {

			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "-"
			sendedMsg, err = tg.TelegramBot.SendMessageButtonLowPriorityRepet(message.ChatID*-1, toTGString, "‚úîÔ∏è –í—Å–µ —Ö–æ—Ä–æ—à–æ. –Ø –±—É–¥—É –Ω–∞ —É—Ä–æ–∫–µ.", data, 3)
			chatID = message.ChatID * -1
			if err != nil {
				logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≥—Ä—É–ø–ø–µ: ", err, "\n;–°–æ–æ–±—â–µ–Ω–∏–µ ", data, "; –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ", message.TeacherName, message.UserName)
				return
			}
		}
	}

	logger.Info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: ", sendedMsg.MessageID, sendedMsg.Text)
	if sendedMsg.MessageID == 0 {
		logger.Error("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –Ω–æ –≤ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–ª–æ –±–µ–∑ –æ—à–∏–±–∫–∏: ", message)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º chatId –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	message.MsgIssent = true
	updateRowConfig := UpdateRowConfig{
		SearchColumnName: "uid",
		SearchValue:      message.UID,
		NewColumnName:    "chat_id",
		NewValue:         chatID,
		Row:              model.Message{},
	}
	err = app.Message.UpdateRow(updateRowConfig)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err)
		return
	}
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	message.MsgIssent = true
	updateRowConfig = UpdateRowConfig{
		SearchColumnName: "uid",
		SearchValue:      message.UID,
		NewColumnName:    "msg_issent",
		NewValue:         true,
		Row:              model.Message{},
	}
	err = app.Message.UpdateRow(updateRowConfig)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err)
		return
	}
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	message.MsgIssent = true
	updateRowConfig = UpdateRowConfig{
		SearchColumnName: "uid",
		SearchValue:      message.UID,
		NewColumnName:    "msg_id",
		NewValue:         sendedMsg.MessageID,
		Row:              model.Message{},
	}
	err = app.Message.UpdateRow(updateRowConfig)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err)
		return
	}
	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
	app.AddHandlerButtonPress(message, sendedMsg.MessageID)

	logger.Info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —É—Ä–æ–∫–∞ UID:", message.UID, "; –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ", message.TeacherName, message.UserName)
}

// HandlCallbackRoute –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.
func (app *NotificationManager) HandlCallbackRoute(appBot *tg.Bot, update tgbotapi.Update, UID string) error {
	// –ü–æ–ª—É—á–µ–Ω–∏–µ callback –∏–∑ –ë–î
	message := CallBack{}
	err := app.CallBack.GetRowByColumn("uid", UID, &message)
	if err != nil {
		logger.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ", update.CallbackQuery.From.FirstName, " –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –ë–î CallBack")
		tg.TelegramBot.ShowAlert(update.CallbackQuery.ID, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞")
		return err
	}
	if "@"+update.CallbackQuery.From.UserName != message.UserName {
		tg.TelegramBot.ShowAlert(update.CallbackQuery.ID, "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
		return errors.New("–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º. –ù–µ —Å–æ–≤–ø–∞–¥–∞–µ–Ω–∏–µ username " + "@" + update.CallbackQuery.From.UserName + " != " + message.UserName)
	}
	// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
	newText := removeLastLine(update.CallbackQuery.Message.Text) + "\n‚úÖ–í—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ!‚úÖ"
	msgToEdit := tgbotapi.NewEditMessageText(update.CallbackQuery.Message.Chat.ID, int(message.MsgID), newText)
	_, err = appBot.EditMessageLowPriority(msgToEdit)
	if err != nil {
		logger.Info("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", err)
		return fmt.Errorf("–æ—à–∏–±–∫–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
	}
	logger.Info(update.CallbackQuery.Message.Text)
	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
	updateRowConfig := UpdateRowConfig{
		SearchColumnName: "uid",
		SearchValue:      message.UID,
		NewColumnName:    "msg_is_pressed",
		NewValue:         true,
		Row:              model.Message{},
	}
	err = app.Message.UpdateRow(updateRowConfig)
	if err != nil {
		logger.Info("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err)
		return err
	}

	// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ë–î callback
	err = app.CallBack.DeleteRecordByColumn("uid", update.CallbackQuery.Data, CallBack{})
	if err != nil {
		logger.Info("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–¥ CallBack: ", err)
	}
	return nil
}

// prepareLessonNotification —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–º–µ—Å—Ç–µ —Å –∫–Ω–æ–ø–∫–æ–π
func prepareLessonNotification(message model.Message) string {
	formattedTime := message.LessonTime.Format("2006-01-02 15:04")

	toTgString := fmt.Sprintf(`
	<strong>–£—Ä–æ–∫ –±—É–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</strong>
	
	<strong>üìã–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</strong>: %s
	<strong>‚è∞–í—Ä–µ–º—è —É—Ä–æ–∫–∞: %s</strong>

	<strong>üî¢–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:</strong> %d
	<strong>üôÇ–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: %s</strong>
	<strong>üòä–£—á–µ–Ω–∏–∫–∏(–∞–∫—Ç–∏–≤–Ω—ã–µ):</strong> %d

	üÜó–ß—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Ä–æ–∫, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É
	`, message.CourseName, formattedTime, message.CourseID, message.TeacherName, message.ActiveMember)
	return toTgString
}

func (appNotification *NotificationManager) AddHandlerButtonPress(message model.Message, msgID int) {
	// –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
	callback := CallBack{
		UID:      message.UID,
		MsgID:    int64(msgID),
		ChatID:   message.ChatID,
		UserName: message.UserName,
	}
	appNotification.CallBack.InsertRow(&callback)
}

func removeLastLine(multilineString string) string {
	// –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
	lines := strings.Split(multilineString, "\n")

	// –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 1, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
	if len(lines) <= 1 {
		return multilineString
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
	return strings.Join(lines[:len(lines)-1], "\n")
}
