package notification

import (
	"easycodeapp/internal/config"
	"easycodeapp/internal/infrastructure/logger"
	"easycodeapp/internal/model"
	"easycodeapp/internal/tg"
	"fmt"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (app *NotificationManager) handleCheckMessages(results []model.Message) {
	for _, msg := range results {
		app.checkMessage(msg)
	}
}

// checkMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä—Ç–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
func (app *NotificationManager) checkMessage(message model.Message) {
	if !isSameYearMonthDay(time.Now(), message.LessonTime) {
		return
	}
	if !(hasDatePassed(message.MsgSendTime)) {
		return
	}

	// –ï—Å–ª–∏ –¥–∞—Ç–∞ —É—Ä–æ–∫–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–∞
	if hasDatePassed(message.DelayTime) {
		// –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª
		if message.MsgIsPressed {

			err := app.handleMsgWithReaction(message)
			if err != nil {
				logger.Info("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –° —Ä–µ–∞–∫—Ü–∏–µ–π: ", err)
				return
			}
			// –Ω–µ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∞
		} else {
			// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
			if !message.MsgIssent {
				err := app.handleMsgWithReaction(message)
				if err != nil {
					logger.Info("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –° —Ä–µ–∞–∫—Ü–∏–µ–π: ", err)
					return
				}
				// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
			} else {

				err := app.handleMsgWithoutReaction(message)
				if err != nil {
					logger.Info("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ë–ï–ó —Ä–µ–∞–∫—Ü–∏–∏: ", err)
					return
				}
			}
		}

		// –ù–µ –¥–∞—Ç–∞ —É—Ä–æ–∫–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–∞
	} else {
		// –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª
		if message.MsgIsPressed {
			err := app.handleMsgWithReaction(message)
			if err != nil {
				logger.Info("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –° —Ä–µ–∞–∫—Ü–∏–µ–π: ", err)
				return
			}
			// –Ω–µ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∞
		} else {
			return
		}
	}
}

// handleMsgWithoutReaction –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ –∑–∞–Ω—è—Ç–∏—è, —É–¥–∞–ª—è–µ—Ç –∏–∑ –ë–î —Å–æ–æ–±—â–µ–Ω–∏–µ
func (app *NotificationManager) handleMsgWithoutReaction(message model.Message) error {

	msgText := prepareMsgTextWithoutReaction(message)
	replyMsg := tgbotapi.NewMessage(config.File.TelegramConfig.NotificationChatId, msgText)
	replyMsg.ReplyToMessageID = config.File.TelegramConfig.AbsenteeismTopicID

	replyMsg.ParseMode = "html"
	_, err := tg.TelegramBot.SendMessageRepetLowPriority(replyMsg, 3)
	if err != nil {
		logger.Info("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É–¥–∞—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ")
	}

	err = app.Message.DeleteRecordByColumn("uid", message.UID, model.Message{})
	if err != nil {
		logger.Info("–ù–µ  —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ", err)
	}

	// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
	newText := preapareLessonFailedNotification(message)

	msgToEdit := tgbotapi.NewEditMessageText(message.ChatID, int(message.MsgID), newText)
	msgToEdit.ParseMode = "html"
	_, err = tg.TelegramBot.EditMessageLowPriority(msgToEdit)
	if err != nil {
		logger.Info("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ", err)
	}

	err = app.Message.DeleteRecordByColumn("uid", message.UID, CallBack{})
	if err != nil {
		return err
	}

	return err
}

// prepareMsgTextWithoutReaction –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
func prepareMsgTextWithoutReaction(message model.Message) string {

	formattedTime := message.LessonTime.Format("2006-01-02 15:04")
	text := fmt.Sprintf(`
	üö®–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞ —É—Ä–æ–∫–µ.
	
	<strong>üìã–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</strong>: %s
	<strong>‚è∞–í—Ä–µ–º—è —É—Ä–æ–∫–∞: %s</strong>
	<strong>üôÇ–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: %s</strong>
	`, message.CourseName, formattedTime, message.TeacherName)

	return text
}

// handleMsgWithReaction —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ë–î
func (app *NotificationManager) handleMsgWithReaction(message model.Message) error {
	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î
	// –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Å—Ç–∞—Ä—É—é
	tempMessage := OldMessage{message}
	err := app.Message.DeleteRecordByColumn("uid", message.UID, model.Message{})
	if err != nil {
		logger.Info("–ù–µ  —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ", err)
	}
	err = app.Message.InsertRow(&tempMessage)
	if err != nil {
		logger.Info("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ", err)
	}

	return nil
}

func preapareLessonFailedNotification(message model.Message) string {
	formattedTime := message.LessonTime.Format("2006-01-02 15:04")

	toTgString := fmt.Sprintf(`
	<strong>–£—Ä–æ–∫ –±—É–¥–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</strong>
	
	<strong>üìã–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</strong>: %s
	<strong>‚è∞–í—Ä–µ–º—è —É—Ä–æ–∫–∞: %s</strong>

	<strong>üî¢–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:</strong> %d
	<strong>üôÇ–ò–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: %s</strong>
	<strong>üòä–£—á–µ–Ω–∏–∫–∏(–∞–∫—Ç–∏–≤–Ω—ã–µ):</strong> %d

	‚ùå–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —É—Ä–æ–∫ –Ω–µ –±—ã–ª–æ. –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä‚ùå
	`, message.CourseName, formattedTime, message.CourseID, message.TeacherName, message.ActiveMember)
	return toTgString
}
